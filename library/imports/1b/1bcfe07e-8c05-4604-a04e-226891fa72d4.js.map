{"version":3,"sources":["assets/script/merge/util/Utils.ts"],"names":[],"mappings":";;;;;;AAAA;IAAA;IA+BA,CAAC;IA9BG;;;;;;;OAOG;IACI,eAAS,GAAhB,UAAiB,GAAG,EAAE,KAAqB;QAArB,sBAAA,EAAA,YAAY,OAAO,EAAE;QACvC,YAAY;QACZ,IAAI,OAAO,GAAG,KAAK,QAAQ;YAAE,OAAO,GAAG,CAAC;QACxC,IAAI,GAAG,KAAK,IAAI;YAAE,OAAO,GAAG,CAAC;QAE7B,iBAAiB;QACjB,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YAAE,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,GAAG,YAAY,IAAI;YAAE,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,GAAG,YAAY,MAAM;YAAE,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;QAElD,mDAAmD;QACnD,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;QACvC,sBAAsB;QACtB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACzB,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;YACnB,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE;gBACV,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO;aAC3D;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IACL,YAAC;AAAD,CA/BA,AA+BC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class Utils {\n    /**\n     * 深拷贝\n     * @example\n     * let src = { a: 123, b: { c: [1, 2, 3], d: \"ceshi\" } };\n     * let tar = Util.deepClone(src);\n     * tar.b.c[0] = 2;\n     * console.log(`obj:`, tar, `src:`, src);\n     */\n    static deepClone(obj, cache = new WeakMap()) {\n        // 普通类型，直接返回\n        if (typeof obj !== 'object') return obj;\n        if (obj === null) return obj;\n\n        // 防止循环引用，程序进入死循环\n        if (cache.get(obj)) return cache.get(obj);\n        if (obj instanceof Date) return new Date(obj);\n        if (obj instanceof RegExp) return new RegExp(obj);\n\n        // 找到所属原型上的constructor，所属原型上的constructor指向当前对象的构造函数\n        const cloneObj = new obj.constructor();\n        // 缓存拷贝的对象，用于处理循环引用的情况\n        cache.set(obj, cloneObj);\n        for (const key in obj) {\n            if (obj[key]) {\n                cloneObj[key] = this.deepClone(obj[key], cache); // 递归拷贝\n            }\n        }\n\n        return cloneObj;\n    }\n}\n"]}