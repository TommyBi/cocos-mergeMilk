{"version":3,"sources":["assets/script/common/comp/PanelBase.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA4C;AAC5C,2CAA0C;AAC1C,oCAAwC;AAGxC;IAAuC,qCAAoB;IAGvD,2BAAmB,QAAgB;QAAnC,YACI,kBAAM,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,SAEtC;QADG,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;IAC7B,CAAC;IALsB,sBAAI,GAAW,mBAAmB,CAAC;IAM9D,wBAAC;CAPD,AAOC,CAPsC,EAAE,CAAC,KAAK,CAAC,WAAW,GAO1D;AAPY,8CAAiB;AAUxB,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAuC,6BAAY;IAAnD;;IA2BA,CAAC;kBA3BoB,SAAS;IAEb,mBAAS,GAAtB,UAAuB,GAAW;uCAAG,OAAO;;;;;wBACxC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;4BAClB,eAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;4BACnC,sBAAO,SAAS,EAAC;yBACpB;wBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;wBACX,qBAAM,aAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAA;;wBAAnC,MAAM,GAAG,SAA0B;wBACnC,OAAO,GAAY,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wBAC1C,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,WAAS,CAAC,CAAC;wBAC5C,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC;wBACjB,sBAAO,OAAO,EAAC;;;;KAClB;IAEM,uBAAa,GAApB;QACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAID,yBAAK,GAAL;;QACI,WAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QACpC,IAAI,IAAI,SAAG,IAAI,CAAC,IAAI,0CAAE,IAAI,CAAC;QAC3B,aAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,oBAAW,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;;IA1BgB,SAAS;QAD7B,OAAO;OACa,SAAS,CA2B7B;IAAD,gBAAC;CA3BD,AA2BC,CA3BsC,EAAE,CAAC,SAAS,GA2BlD;kBA3BoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["import { Logger } from \"../../utils/logger\";\nimport { Utils } from \"../../utils/Utils\";\nimport { GlobalEvent } from \"../Global\";\n\n\nexport class EventOnPanelClose extends cc.Event.EventCustom {\n    public static readonly NAME: string = \"EventOnPanelClose\";\n    viewName: string;\n    public constructor(viewName: string) {\n        super(EventOnPanelClose.NAME, true);\n        this.viewName = viewName;\n    }\n}\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PanelBase extends cc.Component {\n    static Panels: { [key: string]: boolean };\n    static async ShowPanel(url: string): Promise<cc.Node> {\n        if (this.Panels[url]) {\n            Logger.debug(\"[PanelBase] 该弹窗工作中\");\n            return undefined;\n        }\n        this.Panels[url] = true;\n        let prefab = await Utils.loadPefab(url);\n        let insNode: cc.Node = cc.instantiate(prefab);\n        let panel = insNode.getComponent(PanelBase);\n        panel._url = url;\n        return insNode;\n    }\n\n    static onSwitchScene(){\n        this.Panels = {};\n    }\n\n    public _url: string;\n\n    close() {\n        PanelBase.Panels[this._url] = false;\n        let name = this.node?.name;\n        Utils.removeNode(this.node);\n        GlobalEvent.dispatchEvent(new EventOnPanelClose(name));\n    }\n}\n"]}