{"version":3,"sources":["assets/script/common/SaveData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Utils } from \"../utils/Utils\";\nimport { GlobalEvent } from \"./Global\";\nimport { EventOnDataChange } from \"./GlobalEvents\";\nimport { pm } from \"./PmManager\";\n\n\nexport default class SaveData {\n    private _saveKey: string;\n    public get saveKey() {\n        return this._saveKey + \"_\" + 1;\n    }\n\n    list: Map<string, DataNode> = new Map();\n    nodeConfig: { [key: string]: SaveNodeConfig } = {};\n\n    constructor(saveKey: string, nodeConfig: { [key: string]: SaveNodeConfig }) {\n        this._saveKey = saveKey;\n        this.nodeConfig = nodeConfig;\n    }\n\n    init() {\n        let data: string = pm.Get(this.saveKey);\n        let res\n        if (!!data) {\n            if (typeof (data) != \"string\") {\n                res = data;\n            } else res = JSON.parse(data)\n        } else res = {};\n        // let res = !!data ? JSON.parse(data) : {};\n        // let res = data || {};\n        for (let key in this.nodeConfig) {\n            let cfg = this.nodeConfig[key];\n            let node = new DataNode(cfg, res);\n            this.addNode(node);\n        }\n    }\n\n    save() {\n        let rst = {};\n        this.list.forEach(element => {\n            let obj = element.saveObj;\n            rst[element.key] = obj;\n        });\n        // (let key in this.list) {\n        //     let node: DataNode = this.list[key];\n        //     let obj = node.saveObj;\n        //     rst[key] = obj;\n        // }\n        pm.Set(this.saveKey, JSON.stringify(rst))\n    }\n\n    addNode(node: DataNode) {\n        this.list.set(node.key, node);\n    }\n\n    getNode(key: string): DataNode {\n        return this.list.get(key)\n    }\n\n    getValue(key: string): any {\n        return this.getNode(key).value;\n    }\n\n    setValue(key: string, value: any, save: boolean = true) {\n        let node = this.getNode(key);\n        node.value = value;\n        GlobalEvent.dispatchEvent(new EventOnDataChange({ model: this.saveKey, key: key, value: node.value }));\n        save && this.save();\n    }\n}\n\nexport class DataNode {\n    key: string;\n    daily: boolean;\n    saveTime: number;\n\n    normal: any;\n\n    _value: any;\n    get value() {\n        if (this.daily) {\n            let curTime = Utils.getCurTime();\n            if (!Utils.isToday(this.saveTime))\n            // if (curTime - this.saveTime >= GlobalDefines.Second_Day) \n            {\n                this._value = this.normal;\n                this.saveTime = curTime;\n            }\n        }\n        return this._value;\n    }\n    set value(v: any) {\n        this._value = v;\n        if (this.daily) {\n            this.saveTime = Utils.getCurTime();\n        }\n    }\n\n    constructor(cfg: SaveNodeConfig, res: object) {\n        this.key = cfg.key;\n        this.normal = cfg.normal;\n        this.daily = cfg.daily;\n\n        if (!res || !res[this.key]) {\n            this._value = this.normal;\n        } else {\n            let node = res[this.key];\n            this._value = node.v == undefined ? this.normal : node.v;\n            this.saveTime = node.t || 0;\n        }\n    }\n\n    get saveObj() {\n        let rst = {};\n        rst[\"v\"] = this._value;\n        if (this.daily) {\n            rst[\"t\"] = this.saveTime;\n        }\n        return rst;\n    }\n}\n\nexport class SaveNodeConfig {\n    key: string;\n    normal: any;\n    daily: boolean\n    constructor(key: string, normal: any, daily: boolean) {\n        this.key = key;\n        this.normal = normal;\n        this.daily = daily;\n    }\n}\n\n\n\n"]}