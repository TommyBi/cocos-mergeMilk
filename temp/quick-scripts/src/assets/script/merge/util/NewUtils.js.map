{"version":3,"sources":["assets/script/merge/util/NewUtils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export default class NewUtils {\n    /**\n     * 深拷贝\n     * @example\n     * let src = { a: 123, b: { c: [1, 2, 3], d: \"ceshi\" } };\n     * let tar = Util.deepClone(src);\n     * tar.b.c[0] = 2;\n     * console.log(`obj:`, tar, `src:`, src);\n     */\n    static deepClone(obj, cache = new WeakMap()) {\n        // 普通类型，直接返回\n        if (typeof obj !== 'object') return obj;\n        if (obj === null) return obj;\n\n        // 防止循环引用，程序进入死循环\n        if (cache.get(obj)) return cache.get(obj);\n        if (obj instanceof Date) return new Date(obj);\n        if (obj instanceof RegExp) return new RegExp(obj);\n\n        // 找到所属原型上的constructor，所属原型上的constructor指向当前对象的构造函数\n        const cloneObj = new obj.constructor();\n        // 缓存拷贝的对象，用于处理循环引用的情况\n        cache.set(obj, cloneObj);\n        for (const key in obj) {\n            if (obj[key]) {\n                cloneObj[key] = this.deepClone(obj[key], cache); // 递归拷贝\n            }\n        }\n\n        return cloneObj;\n    }\n\n    static randomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // 去重 - 随机生成指定数量指定区间的数组\n    static randomIntArrFromSection(cnt: number, min: number, max: number): number[] {\n        const result = [];\n        do {\n            const v = this.randomIntInclusive(min, max);\n            if (result.indexOf(v) === -1) {\n                result.push(v);\n            }\n        } while (result.length < cnt);\n\n        return result;\n    }\n\n    // 不去重 - 随机生成指定数量指定区间的数组\n    static randomIntArrInclusive(cnt, min, max): number[] {\n        const result = [];\n        do {\n            result.push(this.randomIntInclusive(min, max));\n        } while (result.length < cnt);\n        return result;\n    }\n\n    // 从给定的数组中随机生成一组指定数量的数组\n    static randomIntArrFromArr(cnt, srcArr): number[] {\n        const result = [];\n        do {\n            const index = this.randomIntInclusive(0, srcArr.length - 1);\n            result.push(srcArr[index]);\n        } while (result.length < cnt);\n        return result;\n    }\n}\n"]}