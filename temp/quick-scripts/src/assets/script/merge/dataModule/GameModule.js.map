{"version":3,"sources":["assets/script/merge/dataModule/GameModule.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EventType } from '../manager/Define';\nimport { eventManager, GameEvent } from '../util/EventManager';\nimport Utils from '../util/Utils';\nimport DataModule from './DataModule';\n\nexport default class GameModule extends DataModule {\n    // 用户的筹码槽位数据 1~10\n    public slotData = [\n        [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],\n        [2, 2, 3, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n\n    // 当前正在选中的筹码槽位\n    curSelectSlotIdx: number = -1;\n    // 当前选中的筹码信息\n    curSelectCoinIdxs: number[] = [];\n\n    // 移动锁\n    moveLock: boolean = false;\n    mergeLock: number = 0;\n\n    constructor() {\n        super();\n    }\n\n    parseData(data: any): void {\n        super.parseData(data);\n    }\n\n    /**\n     * @description 通过槽id 获取第一个有效的筹码信息\n     * @param slotIdx: 需要获取第一个有效的筹码信息的槽id\n     * @return vaildNum: 该槽位的有效数字、vaildIdx: 有效数字的索引、vaildSPace: 剩余可容纳的筹码空间\n     */\n    getFirstVaildNumBySlotIdx(slotIdx: number): { vaildNum: number, vaildIdx: number, vaildSpace: number } {\n        const slotData = this.slotData[slotIdx];\n\n        let vaildNum: number = -1;\n        let vaildIdx: number = -1;\n        let vaildSpace: number = 10;\n\n        for (let i = 9; i >= 0; i--) {\n            if (slotData[i] === 0) continue;\n\n            vaildNum = slotData[i];\n            vaildIdx = i;\n            vaildSpace = 9 - i;\n            break;\n        }\n\n        return { vaildNum, vaildIdx, vaildSpace };\n    }\n\n    /**\n     * @description 获取当前选中的待移动的槽位筹码信息\n     * @returns slotIdx: 当前选中的槽位索引、  cnt: 待移动的筹码数量、  num: 待移动的数字类型\n     */\n    getCurSelectSlotInfo(): { slotIdx: number, cnt: number, num: number } {\n        if (this.curSelectSlotIdx === -1) return null;\n        const cnt = this.curSelectCoinIdxs.length;\n        const num = this.slotData[this.curSelectSlotIdx][this.curSelectCoinIdxs[0]];\n        return { slotIdx: this.curSelectSlotIdx, cnt, num };\n    }\n\n    // 重置当前筹码选择状态\n    resetSelectStatus(): void {\n        gameModule.curSelectSlotIdx = -1;\n        gameModule.curSelectCoinIdxs = [];\n    }\n\n    // 筹码移动完成，整理移动后的数据\n    tidySlotData(ed: { tarSlotIdx: number, numType: number, srcIdxArr: number[], tarIdxArr: number[] }) {\n        for (let i = 0; i < ed.srcIdxArr.length; i++) {\n            this.slotData[this.curSelectSlotIdx][ed.srcIdxArr[i]] = 0;\n            this.slotData[ed.tarSlotIdx][ed.tarIdxArr[i]] = ed.numType;\n        }\n\n        // 刷新筹码显示情况\n        eventManager.dispatchEvent(new GameEvent(EventType.MOVE_END, ed));\n\n        // 重置当前选中状态\n        this.resetSelectStatus();\n\n        // 检测是否可以合成\n        eventManager.dispatch(EventType.CHECK_MERGE);\n    }\n\n    // 检测是否有可以合成的槽位\n    checkCanMerge(): number[] {\n        const result = [];\n        for (let i = 0; i < 8; i++) {\n            const can = this.checkCanMergeBySlot(i);\n            if (can) result.push(i);\n        }\n\n        return result;\n    }\n\n    // 通过槽位来检测是否可以进行合成\n    checkCanMergeBySlot(slotId: number): boolean {\n        const slotData = this.slotData[slotId];\n        for (let i = 0; i < 10; i++) {\n            if (slotData[i] === 0) return false;\n            if (i === 0) continue;\n            if (slotData[i] !== slotData[i - 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // 获取当前最大数字\n    getMaxValue(): number {\n        let maxValue = 0;\n        for (let i = 0; i < this.slotData.length; i++) {\n            for (let j = 0; j < this.slotData[i].length; j++) {\n                if (this.slotData[i][j] > maxValue) {\n                    maxValue = this.slotData[i][j];\n                }\n\n            }\n\n        }\n        return maxValue;\n    }\n\n    // 获取当前最小数字\n    getMinValue(): number {\n        let minValue = -1;\n        for (let i = 0; i < this.slotData.length; i++) {\n            for (let j = 0; j < this.slotData[i].length; j++) {\n                if (minValue === -1) {\n                    minValue = this.slotData[i][j];\n                }\n                if (this.slotData[i][j] < minValue) {\n                    minValue = this.slotData[i][j];\n                }\n\n            }\n\n        }\n        return minValue;\n    }\n\n    getSpaceBySlot(id: number): number {\n        if (!this.slotData[id]) return;\n        for (let i = 0; i < this.slotData[id].length; i++) {\n            if (this.slotData[id][i] === 0) {\n                return 10 - i;\n            }\n        }\n    }\n\n    // 获取当前剩余空间\n    getSpace(): number {\n        let space = 0;\n        for (let i = 0; i < 10; i++) {\n            space += this.getSpaceBySlot(i);\n        }\n        return space;\n    }\n\n    // 生成新的筹码数据\n    produceNewCoinData(): number[][] {\n        return [\n            [1],[1],[1],[1],[1],[1],[1],[1]\n        ]\n\n        const maxValue = this.getMaxValue();\n        const space = this.getSpace();\n\n        if (maxValue >= 15) {\n            console.warn('当前已合成15');\n            return;\n        }\n\n        if (space === 0) {\n            console.warn('没有剩余空间，无法生成新数字')\n            return;\n        }\n\n        if (maxValue < 8) {\n            return this.produceStrategyOne(maxValue, space);\n        } else if (maxValue < 10) {\n            return this.produceStrategyTwo(maxValue, space);\n        } else if (maxValue < 12) {\n            return this.produceStrategyThree(maxValue, space);\n        } else if (maxValue < 15) {\n            return this.produceStrategyFour(maxValue, space);\n        }\n    }\n\n    // 仅剩一个空余位置的场景\n    produceOnlyOne(): number[][] {\n        return;\n    }\n\n    /**\n     * @description 小于8 策略\n     * 1、生成数量 min(space*30,5);\n     * 2、生成类型 <= 2\n     * 3、最小数 = 当前场景最小数-1\n     * \n     * @param max: 当前场景中最大的筹码数值\n     * @param space: 当前总的空间数\n     * @returns \n     */\n    produceStrategyOne(max: number, space: number): number[][] {\n        console.log('策略1:<8');\n        if (space === 1) {\n            return this.produceOnlyOne();\n        }\n\n        const min = this.getMinValue();\n\n        // 确定需要生成的数量\n        const cnt = Math.max(Math.floor(Math.min(5, space * 0.3)), 2);\n\n        // 确定需要生成的数字种类\n        const types = Utils.randomIntArrFromSection(cnt, min, max);\n        \n        // 根据种类和数量进行填充\n        \n        return;\n    }\n\n    // 小于10的策略\n    produceStrategyTwo(max: number, space: number): number[][] {\n        console.log('策略2:<10');\n        return;\n    }\n\n    // 小于12的策略\n    produceStrategyThree(max: number, space: number): number[][] {\n        console.log('策略1:<12');\n        return;\n    }\n\n    // 小于15的策略\n    produceStrategyFour(max: number, space: number): number[][] {\n        console.log('策略1:<15');\n        return;\n    }\n\n    // TODO: 新生成的数据和原有数据进行合成\n    mergeProduceData(newData: number[][]): void {\n        for (let slotIdx = 0; slotIdx < 8; slotIdx++) {\n            const newSlotData = Utils.deepClone(newData[slotIdx]);\n            for (let j = 0; j < 10; j++) {\n                if (this.slotData[slotIdx][j] === 0 && newSlotData.length > 0) {\n                    const newCoinData = newSlotData.shift();\n                    this.slotData[slotIdx][j] = newCoinData;\n                }\n            }\n        }\n    }\n}\nexport const gameModule = new GameModule();\n"]}