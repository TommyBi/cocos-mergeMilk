{"version":3,"sources":["assets/script/common/SceneManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ui } from \"../game/common/UIManager\";\nimport { Logger } from \"../utils/logger\";\nimport { Utils } from \"../utils/Utils\";\nimport SceneLoadingUI from \"./comp/SceneLoadingUI\";\nimport { GlobalEvent } from \"./Global\";\nimport { EventOnSwitchScene } from \"./GlobalEvents\";\n\nexport enum SceneType {\n    None = -1,\n    Loading = 0,\n    Stage = 1,\n    Select = 2,\n    Main = 3,\n}\n\nexport class GameScene extends cc.Component {\n    initScene(param: any = undefined): any { }\n    removeScene(): any { }\n    getNode(): cc.Node { return }\n    getType(): SceneType { return -1 }\n}\n\nexport default class SceneManager {\n    private static _ins: SceneManager;\n    public static get ins() {\n        return this._ins || new SceneManager();\n    }\n    public node: cc.Node = null;\n    public curScene: GameScene = null;\n\n    public lastSceneType: SceneType = -1;\n    public nextSceneType: SceneType = -1;\n\n    public isSceneLoading: boolean = false;\n\n    private constructor() { }\n\n    onLoad(node: cc.Node) {\n        this.node = node;\n    }\n\n    async switchScene<T extends GameScene>(T, params: object = undefined, showProgressBar: boolean = false) {\n        this.isSceneLoading = true;\n        let sceneType: SceneType = T.GetType();\n        // if(sceneType == this.curScene.getType()){\n        //     return;\n        // }\n        this.nextSceneType = sceneType;\n        Logger.debug(\"[Ball_Main swtichScene]>>>>>>>>>\", sceneType);\n\n        let oldScene = this.curScene;\n        if (oldScene) {\n            ui.onSwitchScene();\n            oldScene.removeScene();\n        }\n        this.curScene = await this.createScene(T);\n\n        if (this.curScene) {\n            let curSceneNode: cc.Node = null;\n            curSceneNode = this.curScene.getNode();\n            this.node.destroyAllChildren();\n            this.node.addChild(curSceneNode);\n\n            GlobalEvent.dispatchEvent(new EventOnSwitchScene());\n        }\n\n        if (showProgressBar) {\n            SceneLoadingUI.setProgress(1);\n        }\n\n        if (this.curScene) {\n            await this.curScene.initScene(params);\n        }\n        this.lastSceneType = this.nextSceneType;\n        this.isSceneLoading = false;\n    }\n\n    async createScene<T extends GameScene>(T): Promise<GameScene> {\n        let prefab = await Utils.loadPefab(T.Prefab_Name);\n        let ins: cc.Node = cc.instantiate(prefab);\n        ins.width = this.node.width;\n        ins.height = this.node.height;\n        ins.x = 0;\n        ins.y = 0;\n        let comps = ins.getComponentsInChildren(cc.Component);\n        for (let i = 0; i < comps.length; i++) {\n            if (comps[i] instanceof (GameScene)) {\n                return comps[i] as GameScene;\n            }\n        }\n        return undefined;\n    }\n}\nexport const sm = SceneManager.ins;\n"]}