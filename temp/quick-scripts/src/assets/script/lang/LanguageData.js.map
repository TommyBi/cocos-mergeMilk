{"version":3,"sources":["assets/script/lang/LanguageData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nexport let _language = 'zh';\n\nexport let ready: boolean = false;\n\n/**\n * 初始化\n * @param language \n */\nexport function init(language: string) {\n    ready = true;\n    _language = language;\n}\n\nexport function initSource(language: string,languages:any)\n{\n    init(language);\n    const win: any = window;\n    win.languages = {};\n    win.languages[_language] = languages;\n}\n\n/**\n * 翻译数据\n * @param key \n */\nexport function t(key: string,option?:Array<any>) {\n    const win: any = window;\n    \n    if (!win.languages) {\n        return key;\n    }\n\n    let data = win.languages[_language];\n    let result = key;\n    if (!data || !data[key]) \n    {\n        return result;\n    }\n\n    result = data[key];\n\n    if (option) \n    {\n        const regexp = /{\\d}/g;\n        const matchArr = result.matchAll(regexp);\n        if (matchArr) {\n            // const fetchArr = [...matchArr];\n            let fetchArr = [];\n            for (const iterator of matchArr) \n            {\n                fetchArr.push(iterator);    \n            }\n            // console.log(fetchArr,'+++++++++',matchArr);\n            for (let index = 0; index < option.length; index++) \n            {\n                const element = fetchArr[index];\n                if (element) {\n                    result = result.replace(element[0],option[index]);    \n                }\n            }\n            return result\n        }\n        \n    }\n    return result;\n    // const searcher = key.split('.');\n    \n    // let data = win.languages[_language];\n    // for (let i = 0; i < searcher.length; i++) {\n    //     data = data[searcher[i]];\n    //     if (!data) {\n    //         return '';\n    //     }\n    // }\n    // return data || '';\n}\n\nexport function updateSceneRenderers() { // very costly iterations\n    \n    const rootNodes = cc.director.getScene()!.children;\n    // walk all nodes with localize label and update\n    const allLocalizedLabels: any[] = [];\n    for (let i = 0; i < rootNodes.length; ++i) {\n        let labels = rootNodes[i].getComponentsInChildren('LocalizedLabel');\n        Array.prototype.push.apply(allLocalizedLabels, labels);\n    }\n    for (let i = 0; i < allLocalizedLabels.length; ++i) {\n        let label = allLocalizedLabels[i];\n        // if(!label.node.active)continue;\n        label.updateLabel();\n    }\n    // walk all nodes with localize sprite and update\n    const allLocalizedSprites: any[] = [];\n    for (let i = 0; i < rootNodes.length; ++i) {\n        let sprites = rootNodes[i].getComponentsInChildren('LocalizedSprite');\n        Array.prototype.push.apply(allLocalizedSprites, sprites);\n    }\n    for (let i = 0; i < allLocalizedSprites.length; ++i) {\n        let sprite = allLocalizedSprites[i];\n        if(!sprite.node.active)continue;\n        sprite.updateSprite();\n    }\n}\n// 供插件查询当前语言使用\nconst win = window as any;\nwin.initSource = initSource;\nwin._languageData = {\n    get language() {\n        return _language;\n    },\n    init(lang: string) {\n        init(lang);\n    },\n    updateSceneRenderers() {\n        updateSceneRenderers();\n    },\n};\n"]}