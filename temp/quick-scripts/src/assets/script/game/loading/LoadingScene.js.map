{"version":3,"sources":["assets/script/game/loading/LoadingScene.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mEAA8D;AAC9D,mEAA+D;AAE/D,oDAA+C;AAC/C,0DAAqE;AAKrE,uDAAkD;AAG5C,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA0C,gCAAS;IAAnD;QAAA,qEAuEC;QAhEG,YAAM,GAAa,IAAI,CAAC;;IAgE5B,CAAC;qBAvEoB,YAAY;IAEtB,oBAAO,GAAd;QACI,OAAO,wBAAS,CAAC,OAAO,CAAC;IAC7B,CAAC;IAKS,6BAAM,GAAhB;QACI,oDAAoD;IACxD,CAAC;IAEK,mCAAY,GAAlB;;;;;wBAEI,mBAAS,CAAC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;wBACpC,iBAAE,CAAC,QAAQ,GAAG,IAAI,CAAC;wBAEnB,qBAAM,IAAI,CAAC,SAAS,EAAE,EAAA;;wBAAtB,SAAsB,CAAC;;;;;KAC1B;IAED,8BAAO,GAAP;QACI,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGK,8BAAO,GAAb;;;;gBACI,sBAAO,IAAI,OAAO,CAAC,UAAO,OAAO,EAAE,MAAM;;;wCACrC,qBAAM,wBAAc,CAAC,OAAO,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;oCAC/B,wBAAc,CAAC,IAAI,EAAE,CAAC;oCACtB,qBAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAA;;oCAAnC,SAAmC,CAAC;oCACpC,OAAO,CAAC,0BAAU,CAAC,OAAO,CAAC,CAAC;;;;yBAC/B,CAAC,EAAC;;;KACN;IAIK,gCAAS,GAAf;;;;;;;wBACI,mBAAS,CAAC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;wBAEpC,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;wBAE5B,SAAS,GAAW,0BAAU,CAAC,KAAK,CAAC;;4BAErC,qBAAM,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,MAAc;4BACrC,SAAS,GAAG,MAAM,CAAC;wBACvB,CAAC,CAAC,EAAA;;wBAFF,SAEE,CAAC;;;4BACE,SAAS,IAAI,0BAAU,CAAC,KAAK;;;wBACtC,IAAI,SAAS,IAAI,0BAAU,CAAC,OAAO,EAAE;4BACjC,sBAAO;yBACV;wBAED,YAAY;wBACZ,UAAU,CAAC;;gCACP,mDAAmD;gCACnD,kCAAkC;gCAElC,SAAS;gCACT,iBAAE,CAAC,WAAW,CAAC,wBAAc,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;;;6BAEnD,EAAE,CAAC,CAAC,CAAC;wBACN,mBAAS,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;;;;;KAGtC;IACD,8BAAO,GAAP;QACI,OAAO,cAAY,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAEK,kCAAW,GAAjB;;;;;;KACC;;IArEa,wBAAW,GAAG,iCAAiC,CAAC;IAM9D;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;gDACK;IAPP,YAAY;QADhC,OAAO;OACa,YAAY,CAuEhC;IAAD,mBAAC;CAvED,AAuEC,CAvEyC,wBAAS,GAuElD;kBAvEoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["import SceneLoadingUI from \"../../common/comp/SceneLoadingUI\";\nimport { LoadStatus } from \"../../common/consts/GlobalDefines\";\nimport { dm } from \"../../common/DataManager\";\nimport Ball_Main from \"../../common/Ball_Main\";\nimport { GameScene, SceneType, sm } from \"../../common/SceneManager\";\nimport { initSource } from \"../../lang/LanguageData\";\nimport SDKManager from \"../../utils/SDKManager\";\nimport { Utils } from \"../../utils/Utils\";\nimport { bc } from \"../ui/bl_Config\";\nimport Ball_MainScene from \"../ui/Ball_MainScene\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadingScene extends GameScene {\n    public static Prefab_Name = \"prefab/game/scene/loading_scene\";\n    static GetType() {\n        return SceneType.Loading;\n    }\n\n    @property(cc.Label)\n    lb_ver: cc.Label = null;\n\n    protected onLoad(): void {\n        // initSource(\"zh\",this.config.json.language['zh']);\n    }\n\n    async startLoading() {\n\n        Ball_Main.instance.isInited = false;\n        sm.curScene = this;\n\n        await this.initScene();\n    }\n\n    getNode(): cc.Node {\n        return this.node;\n    }\n\n\n    async loadRes() {\n        return new Promise(async (resolve, reject) => {\n            await SceneLoadingUI.preLoad();\n            SceneLoadingUI.show();\n            await Ball_Main.instance.initGame();\n            resolve(LoadStatus.Success);\n        });\n    }\n\n\n\n    async initScene() {\n        Ball_Main.instance.isInited = false;\n\n        cc.debug.setDisplayStats(false);\n        //4 资源加载 如果失败，每隔一秒持续尝试\n        let resStatus: number = LoadStatus.Doing;//-1:同步失败 0:同步成功 1:退出游戏\n        do {\n            await this.loadRes().then((status: number) => {\n                resStatus = status;\n            });\n        } while (resStatus == LoadStatus.Doing)\n        if (resStatus == LoadStatus.GameOut) {\n            return;\n        }\n\n        //立即结束这次同步任务\n        setTimeout(async () => {\n            // sm.switchScene(SelectScene,undefined,true);     \n            // if (dm.player.initTimes <= 1) {\n\n            // }else{\n            sm.switchScene(Ball_MainScene, undefined, true);\n            // } \n        }, 0);\n        Ball_Main.instance.isInited = true;\n\n        // CommonUtils.GameLogin(false,undefined);\n    }\n    getType() {\n        return LoadingScene.GetType();\n    }\n\n    async removeScene() {\n    }\n}"]}